{"mappings":"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","sources":["src/main.ts","src/world.ts","src/utils/other_utils.ts","src/utils/number_utils.ts","src/utils/array_utils.ts","src/utils/geometry.ts","src/actor.ts","src/props.ts","src/game.ts","src/actor_creators.ts","src/actor_actions.ts","src/phase.ts","src/execute_phases.ts"],"sourcesContent":["import type { World } from \"./world\";\nimport type { Actor } from \"./actor\";\n\nimport { worldToString } from \"./world\";\nimport { actorToStringInWorld } from \"./actor\";\nimport { playGame } from \"./game\";\n\n/**\n * Displays a game in text format\n * @param world the world of the game\n * @param actors the actors of the game\n */\nfunction displayGame(world: World, actors : Array<Actor>): void {\n\tconsole.log(`\\x1b[31m${'-'.repeat(world.width * 2)}\\x1b[0m`);\n\tconsole.log(actors.reduce((acc, actor) => actorToStringInWorld(world, acc, actor), worldToString(world)));\n\tconsole.log(`\\x1b[31m${'-'.repeat(world.width * 2)}\\x1b[0m\\n`);\n}\n\nplayGame(displayGame);","import type { Vector2D } from \"./utils/geometry\";\nimport type { Axis } from \"./utils/other_utils\";\nimport type { Actor } from \"./actor\";\n\nimport { isDeepStrictEqual } from \"./utils/other_utils\";\nimport { randomUniqueIntegers } from \"./utils/number_utils\";\nimport { getRandomArrayElementNotInOtherArray, getRandomArrayElement } from \"./utils/array_utils\";\nimport { createVector, getMovementVectorsInRange, translatePoint } from \"./utils/geometry\";\n\n/**\n * A world. It has a width, a height and keeps track of how many turns\n * has passed.\n */\ntype World = {\n\treadonly width: number;\n\treadonly height: number;\n};\n\n/**\n * A world constructor\n * @param width the width of the world\n * @param height The height of the world\n * @returns A world with the given width and height and turns elapsed.\n */\nfunction createWorld(width: number, height: number): World {\n\tif (width <= 0 || height <= 0){\n\t\tthrow new Error(\"World size values must be positive\");\n\t}\n\tif (!Number.isInteger(width) || !Number.isInteger(height)){\n\t\tthrow new Error(\"World size values must be integers\");\n\t}\n\treturn {\n\t\twidth,\n\t\theight\n\t};\n}\n\n/**\n * Returns the length of the given Axis in the given World\n * @param world the world from which the Axis length is computed\n * @param axis the axis that we want to know the length\n * @returns the length of the given Axis in the given World\n */\nfunction axisLength(world: World, axis: Axis) {\n\tswitch (axis) {\n\t\tcase \"x\":\n\t\t\treturn world.width;\n\t\tcase \"y\":\n\t\t\treturn world.height;\n\t\tdefault:\n\t\t\tthrow new Error(\"Unknown axis\");\n\t}\n}\n\n/**\n * Returns an array of 1 to maxPositions random unique aligned positions\n * @param world the world on which the positions are computed\n * @param minPositions the minimum number of positions inside the returned array\n * @param maxPositions the maximum number of positions inside the returned array\n * @param axis the returned positions can reach each other by a translation along this axis\n * @param lineNumber the coordinate of the returned position on the not-given axis\n * @returns an array of 1 to maxPositions random unique positions, that all have the same coordinate value on the axis that was not given\n */\nfunction randomPositionsAlongAxis(world: World, minPositions: number, maxPositions: number, axis: Axis, lineNumber: number): Array<Vector2D>{\n\treturn createPositionsAlongAxis(axis, randomUniqueIntegers(minPositions, maxPositions, 0, axisLength(world, axis)), lineNumber);\n}\n\n/**\n * Returns an array of positions corresponding to the given parameters\n * @param parallelToAxis the returned positions can reach each other by a translation along this axis\n * @param parallelAxisCoords the coordinates, on the parallel axis, of the returned positions\n * @param otherAxislineNumber the coordinate of the returned position on the not-given axis\n * @returns an array of 1 to maxPositions random unique positions, that all have the same coordinate value on the axis that was not given\n */\nfunction createPositionsAlongAxis(parallelToAxis: Axis, parallelAxisCoords: Array<number>, otherAxislineNumber: number): Array<Vector2D>{\n\treturn parallelAxisCoords.map((coord) => parallelToAxis === \"x\" ? createVector(coord, otherAxislineNumber) : createVector(otherAxislineNumber, coord));\n}\n\n/**\n * Checks if a position is in a world or not\n * @param world The world\n * @param position A position\n * @returns true iif the position is in world\n */\nfunction isPositionInWorld(world: World, position: Vector2D): boolean {\n\treturn position.x >= 0 && position.x < world.width && position.y >= 0 && position.y < world.height;\n}\n\n/**\n * Returns the text representation of the world\n * @param world the world\n * @returns the text representation of the world\n */\nfunction worldToString(world: World): string {\n\treturn `${' '.repeat(world.width * 2)}\\n`.repeat(world.height - 1).concat(`${' '.repeat(world.width * 2)}`);\n}\n\n/**\n * Returns the position of the character representing the content of what is at the position described by the given vector, in the given world\n * @param world the world represented by a string where a character represents the given vector\n * @param vector the vector representing the position, represented as a character in the world string representation\n * @returns the position of the character representing the content of what is at the position described by the given vector, in the given world\n */\nfunction vectorToIndexInWorldString(world: World, vector: Vector2D): number {\n\tif (!isPositionInWorld(world, vector)){\n\t\tthrow new Error(\"Position is not in world\");\n\t}\n\treturn vector.y * (world.width * 2 + 1) + vector.x * 2;\n}\n\n/**\n * Returns all the positions in the world that are in the range of the given positon, using the given distance function\n * @param range the range, i.e. max distance, in which the returned positions are from the position \"fromPosition\"\n * @param distanceFunction the function that evaluates the distance between two given positions\n * @param world the world in which the returned positions must be\n * @param fromPosition the position from which the returned positions can be reached\n * @returns all the positions in the world that are in the range of the given positon, using the given distance function.\n * fromPosition can be part of those returned positions.\n */\nfunction getVectorsInRangeInWorld(range: number, distanceFunction: (a: Vector2D, b: Vector2D) => number, world: World, fromPosition: Vector2D): Array<Vector2D> {\n\treturn getMovementVectorsInRange(range, distanceFunction).map((movementVector) => translatePoint(fromPosition, movementVector))\n\t.filter((translatedPosition) => isPositionInWorld(world, translatedPosition));\n}\n\n/**\n * Returns all the positions that are in the bounds of the given world\n * @param world the world that constrains the possible returned positions' values\n * @returns all the positions that are in the bounds of the given world\n */\nfunction allPositionsInWorld(world: World): Array<Vector2D> {\n\treturn Array.from({length: world.width}, (_, currentWidth) => {\n\t\treturn Array.from({length: world.height}, (_, currentHeight) => createVector(currentWidth, currentHeight));\n\t}).flat();\n}\n\n/**\n * Returns a random position of the world which isn't in the givenPositions\n * @param world the world form which the positions are created and can be returned\n * @param givenPositions the positions that must not be returned\n * @returns a random position of the world which isn't in the givenPositions\n */\nfunction getRandomPositionNotInGivenPositions(world: World, givenPositions: Array<Vector2D>): Vector2D | undefined {\n\treturn getRandomArrayElementNotInOtherArray(allPositionsInWorld(world), givenPositions);\n}\n\n/**\n * Returns all the positions from the world where not a single actor from the given actors is, and which\n * are in the given range, using the given distance function\n * @param range the range, i.e. max distance, in which the returned positions are from the position \"fromPosition\"\n * @param distanceFunction the function that evaluates the distance between two given positions\n * @param world the world in which the returned positions must be\n * @param fromPosition the position from which the returned positions can be reached\n * @param actors the returned positions must respect the condition that not a single actor from this\n * array is on one of them.\n * @returns all the positions from the world where not a single actor from the given actors is, and which\n * are in the given range, using the given distance function\n */\nfunction getEmptyCellsInRange(world: World, actors: Array<Actor>, fromPosition: Vector2D, range: number,\n\tdistanceFunction: (a: Vector2D, b: Vector2D) => number): Array<Vector2D> \n{\n\treturn getVectorsInRangeInWorld(range, distanceFunction, world, fromPosition).filter((currentWorldPosition) => \n\t!actors.some((currentActor) => isDeepStrictEqual(currentActor.position, currentWorldPosition)));\n}\n\n/**\n * Returns a random position from the world where not a single actor from the given actors is, and which\n * is in the given range, using the given distance function\n * @param range the range, i.e. max distance, in which the returned position is from the position \"fromPosition\"\n * @param distanceFunction the function that evaluates the distance between two given positions\n * @param world the world in which the returned position must be\n * @param fromPosition the position from which the returned position can be reached\n * @param actors the returned position must respect the condition that not a single actor from this\n * array is on it.\n * @returns a random position from the world where not a single actor from the given actors is, and which\n * is in the given range, using the given distance function\n */\nfunction getEmptyCellInRange(world: World, actors: Array<Actor>, fromPosition: Vector2D, range: number,\n\tdistanceFunction: (a: Vector2D, b: Vector2D) => number): Vector2D | undefined \n{\n\tconst possibleMoves = getEmptyCellsInRange(world, actors, fromPosition, range, distanceFunction);\n\treturn possibleMoves.length > 0 ? getRandomArrayElement(possibleMoves) : undefined;\n}\n\nexport type { World };\n\nexport { createWorld, worldToString, isPositionInWorld, vectorToIndexInWorldString, randomPositionsAlongAxis,\n\tcreatePositionsAlongAxis, axisLength, getVectorsInRangeInWorld,\n\tallPositionsInWorld, getRandomPositionNotInGivenPositions, getEmptyCellInRange};\n","/**\n * Substitutes the i-th character of a string with another string.\n * @param baseString The string to replace the character\n * @param index The index to replace the character\n * @param replacement The replacement string\n * @returns The string with the replaced character\n */\nfunction stringReplaceAt(baseString: string, index: number, replacement: string): string {\n\treturn baseString.substring(0, index) + replacement + baseString.substring(index + replacement.length);\n}\n\n/**\n * Check with deep equality wether two given objects (or primary types) are equal\n * @param object1 one of the two compared objects\n * @param object2 the other one of the two compared objects\n * @returns true if the two given objects are equal, using deep equality\n */\nfunction isDeepStrictEqual(object1: any, object2: any) {\n\tif(object1 === object2)\n\t\treturn true;\n\tif(object1 === undefined || object2 === undefined || !isObject(object1)) {\n\t\treturn false;\n\t}\n\tconst objKeys1 = Object.keys(object1);\n\tconst objKeys2 = Object.keys(object2);\n\n\tif (objKeys1.length !== objKeys2.length) return false;\n\n\tfor (const key of objKeys1) {\n\t\tconst value1 = object1[key];\n\t\tconst value2 = object2[key];\n\n\t\tconst areObjects = isObject(value1) && isObject(value2);\n\n\t\tif ((areObjects && !isDeepStrictEqual(value1, value2)) ||\n\t\t\t(!areObjects && value1 !== value2)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * Returns true if the tested value's type is Object\n * @param object the tested value\n * @returns true if the tested value's type is Object\n */\nfunction isObject(object: any): boolean {\n\treturn object !== null && typeof object === \"object\";\n}\n\n/**\n * Type representing axes in a basis\n */\ntype Axis = \"x\" | \"y\";\n\n/**\n * Returns an axis that is not the given axis\n * @param axis the axis that isn't returned\n */\nfunction otherAxis(axis: Axis): Axis {\n\tswitch (axis) {\n\t\tcase \"x\":\n\t\t\treturn \"y\";\n\t\tcase \"y\":\n\t\t\treturn \"x\";\n\t\tdefault:\n\t\t\tthrow new Error(\"Unknown axis\");\n\t}\n}\n\n/**\n * Pure functionnal decorator used to call the given function \"func\" every \"n\" call of the decorator,\n * and call the given function \"defaultFunc\" when \"func\" isn't called\n * @param func the function that have to be called every n call of the decorator\n * @param defaultFunc the function to call otherwise\n * @param n func is called every n call\n * @param currentN counter, compared to n\n * @returns the new decorator (pure functionnal decorator) and the current returned value (by func or defaultFunc)\n */\nfunction executeFunctionEveryNCall<T extends (...args: any[]) => any>(func: T, defaultFunc: T, n: number, currentN: number = 0)\n\t: [() => [any, T], T] //any is used but should be \"typeof executeFunctionEveryNCallClosure\". The idea is to have a recursive type\n{\n\tfunction executeFunctionEveryNCallClosure(currentNClosure: number): [typeof executeFunctionEveryNCallClosure, T] {\n\t\tconst nextFunc: T = !currentNClosure ? func : defaultFunc;\n\t\treturn [() => executeFunctionEveryNCallClosure((currentNClosure + 1) % n), nextFunc];\n\t}\n\treturn executeFunctionEveryNCallClosure(currentN) as [() => [any, T], T];\n}\n\n/**\n * Returns true if the given value is not undefined\n * @param value the checked value\n * @returns true if the given value is not undefined\n */\nfunction isNotUndefined<T>(value: T | undefined): value is T {\n\treturn value !== undefined;\n}\n\n/**\n * Throws an error if the given value is undefined\n * @param value the checked value\n */\nfunction throwErrorIfUndefined<T>(value: T | undefined): void {\n\tif (!isNotUndefined(value)) {\n\t\tthrow new Error(\"unexpected undefined value\");\n\t}\n}\n\nexport type { Axis };\n\nexport { stringReplaceAt, isDeepStrictEqual, isObject, otherAxis, executeFunctionEveryNCall,\n\tthrowErrorIfUndefined };","import { fisherYatesShuffle } from \"./array_utils\";\n\n/**\n * Return numberOfValues evenly-spaced numbers between fromValue and toValue (evenly-spaced to the bounds as well).\n * For example, 2 evenly-spaced numbers between 0 and 10 would be 3.333 and 6.666 because the steps are the same between 0, 3.333, 6.666, and 10.\n * @param numberOfValues the number of evenly spaced values to return\n * @param fromValue the minimum value that can be returned\n * @param toValue the maximum value that can be returned\n * @param mapFn an optional function to map the results\n * @returns the evenly spaced values (fromValue and toValue are not included in the returned array)\n */\nfunction evenlySpacedNumbers(numberOfValues: number, fromValue: number, toValue: number, mapFn: (value: number) => number = (x) => x): Array<number> {\n\tconst [min, max, indexingFunction]: [number, number, (x: number) => number] = fromValue < toValue ?\n\t[fromValue, toValue, index => (index + 1)]\n\t: [toValue, fromValue, index => (numberOfValues - index)];\n\treturn Array.from({ length: numberOfValues }, (_, index) => mapFn(indexingFunction(index) * (max - min) / (numberOfValues + 1) + min));\n}\n\n/**\n * Return numberOfValues almost-evenly-spaced integers (step values differ at most by 1) between fromValue and toValue (almost-evenly-spaced to the bounds as well).\n * For example, 2 almost-evenly-spaced integers between 0 and 10 would be 3 and 6 because the steps are almost the same between 0, 3, 6, and 10.\n * @param numberOfValues the number of evenly spaced values to return\n * @param fromValue the minimum value that can be returned\n * @param toValue the maximum value that can be returned\n * @returns the evenly spaced values (fromValue and toValue are not included in the returned array)\n */\nfunction almostEvenlySpacedIntegers(numberOfValues: number, fromValue: number, toValue: number): Array<number> {\n\treturn evenlySpacedNumbers(numberOfValues, fromValue, toValue, Math.floor);\n}\n\n/**\n * Returns a random integer x such as minValue <= x < maxValue\n * @param minValue the minimum value that the returned integer can take\n * @param maxValue the (maximum + 1) value that the returned integer can take\n * @returns random integer x such as minValue <= x < maxValue\n */\nfunction randomInteger(minValue: number, maxValue: number): number {\n\treturn Math.floor(Math.random() * (maxValue - minValue)) + minValue;\n}\n\n/**\n * Returns a random integer in [minValue, maxValue) and that is not present in the given \"existingIntegers\"\n * @param minValue the minimum value that the returned integer can take\n * @param maxValue the (maximum + 1) value that the returned integer can take\n * @param existingIntegers the returned integer must not already be present in this array\n * @returns a random integer in the given bounds and that is not present in the given \"existingIntegers\"\n */\nfunction randomUniqueInteger(minValue: number, maxValue: number, existingIntegers : Array<number>) {\n\tlet randInt = randomInteger(minValue, maxValue);\n\twhile (existingIntegers.find((currentInt) => randInt === currentInt)) {\n\t\trandInt = randomInteger(minValue, maxValue);\n\t}\n\treturn randInt;\n}\n\n/**\n * Randomly returns minNumberOfValues to maxNumberOfValues (included) random unique integers (no repetition) whose values are in [minValue, maxValue)\n * @param minNumberOfValues the minimum number of returned values\n * @param maxNumberOfValues the maximum number of returned values\n * @param minValue the minimum value that a returned value can take\n * @param maxValue the (maximum + 1) value that a returned value can take\n * @returns minNumberOfValues to maxNumberOfValues (included) random unique integers (no repetition) whose values are in [minValue, maxValue)\n */\nfunction randomUniqueIntegers(minNumberOfValues: number, maxNumberOfValues: number, minValue: number, maxValue: number): Array<number> {\n\tif (maxValue - minValue < maxNumberOfValues) {\n\t\tthrow new Error(\"It is impossible to return more than n unique values among among n values.\");\n\t}\n\tif (minNumberOfValues > maxNumberOfValues || minValue > maxValue) {\n\t\tthrow new Error(\"Params starting with 'min' must be inferior to their counterpart starting with 'max'\");\n\t}\n\n\tfunction randomUniqueIntegersTailRecursive(minNumberOfValues: number, maxNumberOfValues: number, existingIntegers: Array<number>): Array<number> {\n\t\tif (!maxNumberOfValues) {\n\t\t\treturn existingIntegers;\n\t\t}\n\t\tif (maxNumberOfValues === minNumberOfValues || Math.random() < 0.5) {\n\t\t\treturn randomUniqueIntegersTailRecursive(minNumberOfValues - 1, maxNumberOfValues - 1, existingIntegers\n\t\t\t\t.concat(randomUniqueInteger(minValue, maxValue, existingIntegers)));\n\t\t} else {\n\t\t\treturn randomUniqueIntegersTailRecursive(minNumberOfValues, maxNumberOfValues - 1, existingIntegers);\n\t\t}\n\t}\n\treturn randomUniqueIntegersTailRecursive(minNumberOfValues, maxNumberOfValues, []);\n}\n\n/**\n * This function terminates, not {@link randomUniqueIntegers}.\n * Randomly returns minNumberOfValues to maxNumberOfValues (included) randomly sorted unique integers (no repetition) whose values are in [minValue, maxValue)\n * and that contain all the lowest values that can possibly be returned.\n * @param minNumberOfValues the minimum number of returned values\n * @param maxNumberOfValues the maximum number of returned values\n * @param minValue the minimum value that a returned value can take\n * @param maxValue the (maximum + 1) value that a returned value can take\n * @returns minNumberOfValues to maxNumberOfValues (included) randomly sorted unique integers (no repetition) whose values are in [minValue, maxValue)\n * and that contain all the lowest values that can possibly be returned.\n */\nfunction randomUniqueMinIntegers(minNumberOfValues: number, maxNumberOfValues: number, minValue: number, maxValue: number): Array<number> {\n\tif (maxValue - minValue < maxNumberOfValues) {\n\t\tthrow new Error(\"It is impossible to return more than n unique values among among n values.\");\n\t}\n\tif (minNumberOfValues > maxNumberOfValues || minValue > maxValue) {\n\t\tthrow new Error(\"Params starting with 'min' must be inferior to their counterpart starting with 'max'\");\n\t}\n\n\treturn fisherYatesShuffle(Array.from({length: Math.random() * (maxNumberOfValues - minNumberOfValues + 1) + minNumberOfValues}, (_, i) => (i + minValue)));\n}\n\nexport { randomUniqueMinIntegers, almostEvenlySpacedIntegers, evenlySpacedNumbers, randomUniqueIntegers };","import { isDeepStrictEqual } from \"./other_utils\";\n\n/**\n * Computes the sum of all the elements of the array\n * @param array the array\n * @returns the sum of all the elements of the array\n */\nfunction sum(array: Array<number>) {\n\treturn array.reduce((acc, current) => acc + current, 0);\n}\n\n/**\n * Returns a new instance of the given array without the element of this array that is at the given index\n * @param arr the array on which an element is removed\n * @param index the index at which the element of the array is removed\n * @returns a new instance of the given array without the element of this array that is at the given index\n */\nfunction arrayWithoutElementAtIndex<T>(arr: Array<T>, index: number): Array<T> {\n\treturn arr.slice(0, index).concat(arr.slice(index + 1));\n}\n\n/**\n * Shuffles a new instance of the given array using a pure recursive version of the Fisher-Yates shuffle algorithm\n * @param arrayToShuffle the array to shuffle\n * @returns a shuffled new instance of the given array using a pure recursive version of the Fisher-Yates shuffle algorithm\n */\nfunction fisherYatesShuffle<T>(arrayToShuffle: Array<T>): Array<T> {\n\tfunction fisherYatesShuffleTailRecursive(alreadyShuffled: Array<T>, restToShuffle: Array<T>): Array<T> {\n\t\tif (restToShuffle.length === 0) return alreadyShuffled;\n\t\tconst randomIndex = Math.floor(Math.random() * restToShuffle.length);\n\t\treturn fisherYatesShuffleTailRecursive(alreadyShuffled.concat(restToShuffle[randomIndex]), arrayWithoutElementAtIndex(restToShuffle, randomIndex));\n\t}\n\treturn fisherYatesShuffleTailRecursive([], arrayToShuffle);\n}\n\n/**\n * Returns a random element from the given array that is not in the other given array, or undefined\n * @param fromArray the array from where the random element is returned\n * @param otherArray the array containing the elements that must not be returned\n * @returns a random element from the given array that is not in the other given array, or undefined\n */\nfunction getRandomArrayElementNotInOtherArray<T>(fromArray: Array<T>, otherArray: Array<T>): T | undefined {\n\tif (!fromArray.length) {\n\t\tthrow new Error('Cannot get a random element from an empty array');\n\t}\n\tconst randomIndexOrder: Array<number> = fisherYatesShuffle(Array.from({length: fromArray.length}, (_, i) => (i)));\n\tconst elementIndex: number | undefined = randomIndexOrder.reduce(\n\t\t(acc, randomIndex) => {\n\t\t\tif (acc === undefined && !otherArray.some((el) => isDeepStrictEqual(el, fromArray[randomIndex]))) {\n\t\t\t\treturn randomIndex;\n\t\t\t}\n\t\t\treturn acc;\n\t\t},\n\tundefined);\n\treturn elementIndex === undefined ? undefined : fromArray[elementIndex];\n}\n\n/**\n * Returns a random element from the given array\n * @param fromArray the array from where the random element is returned\n * @returns a random element from the given array\n */\nfunction getRandomArrayElement<T>(fromArray: Array<T>): T {\n\tif (!fromArray.length) {\n\t\tthrow new Error('Cannot get a random element from an empty array');\n\t}\n\treturn fromArray[Math.floor(Math.random() * fromArray.length)];\n}\n\nexport { sum, getRandomArrayElement, getRandomArrayElementNotInOtherArray, arrayWithoutElementAtIndex, fisherYatesShuffle};","import type { Axis } from \"./other_utils\";\n\nimport { isDeepStrictEqual } from \"./other_utils\";\n\n/**\n * A 2D vector\n */\ntype Vector2D = { x: number, y: number; };\n\n/**\n * Vector constructor\n * @param x x coordinates\n * @param y y coordinates\n * @returns a new vector with the corresponding coordinates\n */\nfunction createVector(x: number, y: number): Vector2D {\n\treturn { x: x, y: y };\n}\n\n/**\n * Translates a point according to a translation vector\n * @param origin The origin point\n * @param translation The translation vector\n * @returns The vector that corresponds to the origin point translated along the translation vector \n */\nfunction translatePoint(origin: Vector2D, translation: Vector2D): Vector2D {\n\treturn { x: origin.x + translation.x, y: origin.y + translation.y };\n}\n\n/**\n * Returns the string representation of the vector\n * @param v the vector\n * @returns the string representation of the vector\n */\nfunction vector2DToString(v: Vector2D): string {\n\treturn `(${v.x}, ${v.y})`;\n}\n\n/**\n * Computes the distance between 2 vectors\n * @param a a vector\n * @param b another vector\n * @returns the euclidean distance between vector a and b\n */\nfunction euclideanDistance(a: Vector2D, b: Vector2D): number {\n\treturn Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n}\n\n/**\n * Creates a range*range square of positions centered on the position {0, 0} and filter those positions so that\n * they are in the range of {0, 0} using the given range, and the given distance function.\n * @param range the range in which the positions from the created square are kept and returned\n * @param distanceFunction the function that evaluates the distance between two positions.\n * Its return value is compared to the given range.\n * @returns all the positions that are in the range of the position {0, 0} using the given distance function.\n * The position {0, 0} is included in the result.\n */\nfunction getMovementVectorsInRange(range: number, distanceFunction: (a: Vector2D, b: Vector2D) => number): Array<Vector2D>  {\n\treturn Array.from({ length: 2 * range + 1 }, (_, i) =>\n\tArray.from({ length: 2 * range + 1 }, (_, j) => createVector(i - range, j - range))\n\t).flat().filter((vector) => distanceFunction(createVector(0, 0) , vector) <= range);\n}\n\n/**\n * Returns a Vector2D containing the information of the movement that has to be done in order to move by one step from fromPosition towards the given toPosition.\n * First, the movement is done along the given \"firstAxis\" parameter.\n * @param fromPosition the initial position, before the movement\n * @param toPosition the position that we want to reach, from the fromPosition\n * @param firstAxis the movement is done along this axis first.\n * @returns a Vector2D containing the information of the movement that has to be done in order to move towards the given toPosition.\n */\nfunction movingVector(fromPosition: Vector2D, toPosition: Vector2D, firstAxis: Axis = \"x\"): Vector2D {\n\tswitch (firstAxis) {\n\t\tcase \"x\":\n\t\t\tif (fromPosition.x < toPosition.x) {\n\t\t\t\treturn createVector(1, 0);\n\t\t\t} else if (fromPosition.x > toPosition.x) {\n\t\t\t\treturn createVector(-1, 0);\n\t\t\t} else if (fromPosition.y < toPosition.y) {\n\t\t\t\treturn createVector(0, 1);\n\t\t\t} else if (fromPosition.y > toPosition.y) {\n\t\t\t\treturn createVector(0, -1);\n\t\t\t} else {\n\t\t\t\treturn createVector(0, 0);\n\t\t\t}\n\t\tcase \"y\":\n\t\t\tif (fromPosition.y < toPosition.y) {\n\t\t\t\treturn createVector(0, 1);\n\t\t\t} else if (fromPosition.y > toPosition.y) {\n\t\t\t\treturn createVector(0, -1);\n\t\t\t} else if (fromPosition.x < toPosition.x) {\n\t\t\t\treturn createVector(1, 0);\n\t\t\t} else if (fromPosition.x > toPosition.x) {\n\t\t\t\treturn createVector(-1, 0);\n\t\t\t} else {\n\t\t\t\treturn createVector(0, 0);\n\t\t\t}\n\t\tdefault:\n\t\t\tthrow new Error(\"Unknown axis\");\n\t}\n}\n\n/**\n * Returns an array of positions that constitute a path between two other positions, i.e. that visualy links two other positions.\n * @param fromPosition the starting position and target position for building the path are not included in the returned array\n * @param toPosition the target position for building the path, not included in the returned array\n * @param firstAxis this parameter can be used to define the axis to prioritize for movement when multiple options are available.\n * @returns an array of positions that constitute a path between two other positions, i.e. that visualy links two other positions.\n */\nfunction linkingPath(fromPosition: Vector2D, toPosition: Vector2D, firstAxis?: Axis): Array<Vector2D> {\n\tconst firstProcessedPosition = translatePoint(fromPosition, movingVector(fromPosition, toPosition, firstAxis));\n\tfunction linkingPathTailRecursive(fromPosition: Vector2D, toPosition: Vector2D, positionsAccumulator: Array<Vector2D>): Array<Vector2D> {\n\t\tif (isDeepStrictEqual(fromPosition, toPosition)) {\n\t\t\treturn positionsAccumulator;\n\t\t}\n\t\tconst nextProcessedPosition = translatePoint(fromPosition, movingVector(fromPosition, toPosition, firstAxis));\n\t\treturn linkingPathTailRecursive(nextProcessedPosition, toPosition, positionsAccumulator.concat(fromPosition));\n\t}\n\treturn linkingPathTailRecursive(firstProcessedPosition, toPosition, []);\n}\n\n/**\n * Returns an array of positions that constitute a path linking the given positions, i.e. that visualy links the other positions.\n * @param positions two-dimensional array of positions. Positions from each \"index\" are linked to the positions from the \"index - 1\" index.\n * the positions given as parameter are not included in the returned array.\n * @param firstAxis this parameter can be used to define the axis to prioritize for movement when multiple options are available.\n * @returns an array of positions that constitute a path linking the given positions, i.e. that visualy links the other positions.\n */\nfunction positionsLinking(positions: Array<Array<Vector2D>>, firstAxis?: Axis): Array<Vector2D> {\n\treturn positions.reduce((acc: Array<Vector2D>, currentPositions, index) => {\n\t\tif (!index) {\n\t\t\treturn acc;\n\t\t}\n\t\treturn acc.concat(currentPositions.map((currentPosition) => positions[index - 1]\n\t\t.map((previousPosition) => linkingPath(previousPosition, currentPosition, firstAxis)).flat()).flat());\n\t}, []);\n}\n\n/**\n * Returns true iff the given vector respects the coordinate constraints given as parameter\n * @param vector the vector that is tested\n * @param xCoord the x coordinate constraint. If undefined, x coordinate is not a constraint.\n * @param yCoord the x coordinate constraint. If undefined, x coordinate is not a constraint.\n * @returns true iff the given vector respects the coordinate constraints given as parameter\n */\nfunction vectorHasCoords(vector: Vector2D, xCoord?: number, yCoord?: number): boolean {\n\treturn (xCoord === undefined || (vector.x === xCoord)) &&\n\t(yCoord === undefined || (vector.y === yCoord));\n}\n\nexport { translatePoint, vector2DToString, createVector, euclideanDistance, movingVector, linkingPath, vectorHasCoords,\n\tgetMovementVectorsInRange, positionsLinking };\n\nexport type { Vector2D };\n","import type { Vector2D } from \"./utils/geometry\";\nimport type { World } from \"./world\";\nimport type { ActorActions, ActionGenerators } from \"./actor_actions\";\n\nimport { vector2DToString, translatePoint, vectorHasCoords } from \"./utils/geometry\";\nimport { isDeepStrictEqual, stringReplaceAt } from \"./utils/other_utils\";\nimport { getRandomArrayElement } from \"./utils/array_utils\";\nimport { vectorToIndexInWorldString, isPositionInWorld } from \"./world\";\nimport { getWaypointTargetNumber, getWaypointTarget, setWaypointTargetNumber, setWaypointTarget, getWaypointNumber } from \"./props\";\n\n/**\n * Actors that can move by themselves on the board.\n */\nconst walkerKeys = [\"ignorant\", \"ignoranceSpreader\"] as const;\ntype Walker = typeof walkerKeys[number];\n\n/**\n * All the different actor kinds.\n */\nconst kindKeys = [...walkerKeys, \"goodGuy\", \"ground\", \"spawner\", \"spaghettiMonster\", \"player\"] as const;\ntype Kind = typeof kindKeys[number];\n\n/**\n * An actor. It has a position in the world, a kind, faithPoints points,\n * different actions describing its behavior during the differents Phases of the game,\n * and additional properties that are not typed.\n * Additional properties should always check kind and/or tag before actually accessing them.\n */\ntype Actor = {\n\tposition: Vector2D;\n\tactionGenerators: ActionGenerators;\n\tactions: ActorActions;\n\tkind: Kind;\n\texternalProps?: Record<any, any>;\n};\n\n/**\n * Returns true if the given actor's kind is included in the given array of kind\n * @param actor the tested actor\n * @param kinds the array of kinds\n * @returns true if the given actor's kind is included in the given array of kind\n */\nfunction hasOneOfKinds(actor: Actor, kinds: Array<Kind>) {\n\treturn kinds.includes(actor.kind);\n}\n\n/**\n * Returns true if the given actor's kind is included in the kinds of the type Walker,\n * which reprensents the actors that move on the path generated from the spawns to the spaghettiMonsters\n * @param actor the tested actor\n * @returns true if the given actor's kind is included in the kinds of the type Walker,\n * which reprensents the actors that move on the path generated from the spawns to the spaghettiMonsters\n */\nfunction isWalker(actor: Actor): boolean {\n\treturn hasOneOfKinds(actor, [...walkerKeys]);\n}\n\n/**\n * Returns a string representation of the given actor\n * @param actor The actor that is described by the returned string\n * @returns a string representation of the actor\n */\nfunction actorToString(actor: Actor): string {\n\treturn `{position: ${vector2DToString(actor.position)}, kind: ${actor.kind}}`;\n}\n\n/**\n * Returns the string representation of the world with the given actor in it\n * @param world The world represented by worldString, and where the actors are\n * @param worldString The string that represents the world, but not necessarily representing all of the actors in the world\n * @param actor The actor that is being added to the string representation of the world\n * @returns The string representation of the world with the given actor in it\n */\nfunction actorToStringInWorld(world: World, worldString: string, actor: Actor): string {\n\treturn stringReplaceAt(worldString, vectorToIndexInWorldString(world, actor.position), actor.kind.charAt(0));\n}\n\n/**\n * Return a new array containing actors with the specified kind.\n * \n * @param actors The array to filter from \n * @param kinds The kinds to keep\n * @returns A new array with actor from the given array, of the given kind\n */\nfunction filterByKinds(actors: Array<Actor>, kinds : Array<Kind>): Array<Actor> {\n\treturn actors.filter((actor) => kinds.find((key) => actor.kind === key));\n}\n\n/**\n * Applies a translation to the actor's position and returns the translated actor.\n * @param actor The actor that is being tranlated\n * @param movementVector The movement vector\n * @returns The actor after its position was translated according to a movement vector\n */\nfunction translateActor(actor: Actor, movementVector: ReturnType<ActorActions[\"move\"]>): Actor {\n\treturn { ...actor, position: translatePoint(actor.position, movementVector) };\n}\n\n/**\n * Returns the informations about the waypoint that should be the target once the given waypoint is reached\n * @param actors all the actors of the game\n * @param waypointTarget the position of the current waypoint target\n * @param waypointTargetNumber the number of the current waypoint target\n * @returns a dictionnary containing the informations about the waypoint that should be the target once the given waypoint is reached\n */\nfunction findNextWaypointTarget(actors: Array<Actor>, waypointTarget: Vector2D, waypointTargetNumber: number): { waypointTargetNumber: number, waypointTarget: Actor[\"position\"] } {\n\tconst possibilities = actors.filter((currentActor) => currentActor?.externalProps?.waypointNumber === waypointTargetNumber + 1);\n\tif (!possibilities.length) {\n\t\treturn { waypointTargetNumber, waypointTarget };\n\t}\n\tconst nextWaypointTarget = getRandomArrayElement(possibilities);\n\treturn { waypointTargetNumber: getWaypointNumber(nextWaypointTarget), waypointTarget: nextWaypointTarget.position };\n}\n\n/**\n * Translates the movingActor according to the given movementVector, and updates its waypointTarget if it has been reached\n * @param actors all the actors of the game\n * @param movingActor the actor that is being translated\n * @param movementVector the movement defining where the movingActor is moving\n * @returns the movingActor with its updated position (after the movement)\n */ \nfunction translateAndUpdateWaypoint(actors: Array<Actor>, movingActor: Actor, movementVector: ReturnType<ActorActions[\"move\"]>): Actor {\n\tconst newPosition = translatePoint(movingActor.position, movementVector);\n\tif ((isWalker(movingActor)) && isDeepStrictEqual(newPosition, getWaypointTarget(movingActor))) {\n\t\tconst nextWaypoint = findNextWaypointTarget(actors, getWaypointTarget(movingActor), getWaypointTargetNumber(movingActor));\n\t\treturn setWaypointTargetNumber(\n\t\t\tsetWaypointTarget({ ...movingActor, position: newPosition }, nextWaypoint.waypointTarget),\n\t\t\tnextWaypoint.waypointTargetNumber);\n\t}\n\treturn { ...movingActor, position: newPosition };\n}\n\n/**\n * Returns whether an actor is valid among an environment (world, other actors...) given as parameters\n * @param world The world where the actor is\n * @param actor We want to know if this actor is valid\n * @returns true iif the actor is in the world's bounds\n */\nfunction isValidActorInEnvironment(world: World, actor: Actor): boolean {\n\treturn isPositionInWorld(world, actor.position);\n}\n\n/**\n * Returns the actors from the given actor array whose position respect the given position constraints\n * @param actors the actors potentially returned and againt which the coordinate constraints are tested\n * @param xPosition the x coordinate constraint. If undefined, x coordinate is not a constraint.\n * @param yPosition the y coordinate constraint. If undefined, x coordinate is not a constraint.\n * @returns the actors from the given actor array whose position respect the given position constraints\n */\nfunction filterActorsByPosition(actors: Array<Actor>, xPosition?: number, yPosition?: number): Array<Actor> {\n\treturn actors.filter((currentActor) => vectorHasCoords(currentActor.position, xPosition, yPosition));\n}\n\nexport { actorToString, actorToStringInWorld, translateActor, translateAndUpdateWaypoint, \n\tstringReplaceAt, filterByKinds, findNextWaypointTarget, isValidActorInEnvironment,\n\tfilterActorsByPosition, isWalker, hasOneOfKinds, walkerKeys, kindKeys };\nexport type { Actor, Kind, Walker, ActionGenerators };\n","import type { Actor } from \"./actor\";\nimport type { Vector2D } from \"./utils/geometry\";\n\nimport { throwErrorIfUndefined } from \"./utils/other_utils\";\n\n///\n/// \n///\n\n/**\n * This file contains:\n * - getters to get the content of the externalProps field of the given actor of type {@link Actor}\n * - setters to set the externalProps of the given actor to the given value\n */\n\n///\n/// \n///\n\nfunction setConviction(actor: Actor, conviction: number): Actor {\n\treturn { ...actor, externalProps: { ...actor.externalProps, conviction } };\n}\n\nfunction getConviction(actor: Actor): number {\n\tthrowErrorIfUndefined<Record<any, any>>(actor.externalProps);\n\tthrowErrorIfUndefined<number>(actor.externalProps!.conviction);\n\treturn actor.externalProps!.conviction;\n}\n\nfunction setRange(actor: Actor, range: number): Actor {\n\treturn { ...actor, externalProps: { ...actor.externalProps, range } };\n}\n\nfunction getRange(actor: Actor): number {\n\tthrowErrorIfUndefined<Record<any, any>>(actor.externalProps);\n\tthrowErrorIfUndefined<number>(actor.externalProps!.range);\n\treturn actor.externalProps!.range;\n}\n\nfunction getWaypointTarget(actor: Actor): Vector2D {\n\tthrowErrorIfUndefined<Record<any, any>>(actor.externalProps);\n\tthrowErrorIfUndefined<Vector2D>(actor.externalProps!.waypointTarget);\n\treturn actor.externalProps!.waypointTarget!;\n}\n\nfunction setWaypointTarget(actor: Actor, waypointTarget: Vector2D): Actor {\n\treturn { ...actor, externalProps: { ...actor.externalProps, waypointTarget } };\n}\n\nfunction getWaypointNumber(actor: Actor): number {\n\tthrowErrorIfUndefined<Record<any, any>>(actor.externalProps);\n\tthrowErrorIfUndefined<number>(actor.externalProps!.waypointNumber);\n\treturn actor.externalProps!.waypointNumber!;\n}\n\nfunction setWaypointNumber(actor: Actor, waypointNumber: number): Actor {\n\treturn { ...actor, externalProps: { ...actor.externalProps, waypointNumber } };\n}\n\nfunction getWaypointTargetNumber(actor: Actor): number {\n\tthrowErrorIfUndefined<Record<any, any>>(actor.externalProps);\n\tthrowErrorIfUndefined<number>(actor.externalProps!.waypointTargetNumber);\n\treturn actor.externalProps!.waypointTargetNumber!;\n}\n\nfunction setWaypointTargetAndNumber(actor: Actor, waypointTarget: Vector2D, waypointTargetNumber: number): Actor {\n\treturn setWaypointTarget(\n\t\tsetWaypointTargetNumber(actor, waypointTargetNumber), waypointTarget\n\t);\n}\n\nfunction setWaypointTargetNumber(actor: Actor, waypointTargetNumber: number): Actor {\n\treturn { ...actor, externalProps: { ...actor.externalProps, waypointTargetNumber } };\n}\n\nfunction getSpawnProba(actor: Actor): number {\n\tthrowErrorIfUndefined<Record<any, any>>(actor.externalProps);\n\tthrowErrorIfUndefined<number>(actor.externalProps!.spawnProba);\n\treturn actor.externalProps!.spawnProba!;\n}\n\nfunction setSpawnProba(actor: Actor, spawnProba: number): Actor {\n\treturn { ...actor, externalProps: { ...actor.externalProps, spawnProba } };\n}\n\nfunction setSpreadIgnorancePower(actor: Actor, spreadIgnorancePower: number): Actor {\n\treturn { ...actor, externalProps: { ...actor.externalProps, spreadIgnorancePower } };\n}\n\nfunction getSpreadIgnorancePower(actor: Actor): number {\n\tthrowErrorIfUndefined<Record<any, any>>(actor.externalProps);\n\tthrowErrorIfUndefined<number>(actor.externalProps!.spreadIgnorancePower);\n\treturn actor.externalProps!.spreadIgnorancePower;\n}\n\nfunction setFaithPoints(actor: Actor, faithPoints: number): Actor {\n\treturn { ...actor, externalProps: { ...actor.externalProps, faithPoints } };\n}\n\nfunction getFaithPoints(actor: Actor): number {\n\tthrowErrorIfUndefined<Record<any, any>>(actor.externalProps);\n\tthrowErrorIfUndefined<number>(actor.externalProps!.faithPoints);\n\treturn actor.externalProps!.faithPoints;\n}\n\nfunction getMaxFaith(actor: Actor): number {\n\tthrowErrorIfUndefined<Record<any, any>>(actor.externalProps);\n\tthrowErrorIfUndefined<number>(actor.externalProps!.maxFaith);\n\treturn actor.externalProps!.maxFaith;\n}\n\nfunction setMaxFaith(actor: Actor, maxFaith: number): Actor {\n\treturn { ...actor, externalProps: { ...actor.externalProps, maxFaith } };\n}\n\nfunction setFaithPointsAndMax(actor: Actor, faithPoints: number, maxFaithPoints: number): Actor {\n\treturn setFaithPoints(\n\t\tsetMaxFaith(actor, maxFaithPoints), faithPoints\n\t);\n}\n\nfunction getPlayProba(actor: Actor): number {\n\tthrowErrorIfUndefined<Record<any, any>>(actor.externalProps);\n\tthrowErrorIfUndefined<number>(actor.externalProps!.playProba);\n\treturn actor.externalProps!.playProba;\n}\n\nfunction setPlayProba(actor: Actor, playProba: number): Actor {\n\treturn { ...actor, externalProps: { ...actor.externalProps, playProba } };\n}\n\nexport {\n\tsetConviction, getConviction, setRange, getRange,\n\tgetWaypointTarget, setWaypointTarget, getWaypointNumber, setWaypointNumber,\n\tgetWaypointTargetNumber, setWaypointTargetNumber, getSpawnProba, setSpawnProba,\n\tsetSpreadIgnorancePower, getSpreadIgnorancePower, setFaithPoints, getFaithPoints, getMaxFaith,\n\tgetPlayProba, setMaxFaith, setWaypointTargetAndNumber, setFaithPointsAndMax, setPlayProba\n};","import type { World } from \"./world\";\nimport type { Phase } from \"./phase\";\nimport { Actor, filterByKinds } from \"./actor\";\nimport type { Axis } from \"./utils/other_utils\";\n\nimport { positionsLinking } from \"./utils/geometry\";\nimport { createWorld, randomPositionsAlongAxis, createPositionsAlongAxis } from \"./world\";\nimport { createGround, createSpaghettiMonster, createSpawner, createPlayer } from \"./actor_creators\";\nimport { isValidActorInEnvironment, isWalker } from \"./actor\";\nimport { createPhase } from \"./phase\";\nimport { spreadConvictionPhase, enemyFleePhase, spawnPhase, temperatureRisePhase, movePhase, playPhase } from \"./execute_phases\";\nimport { otherAxis, isDeepStrictEqual } from \"./utils/other_utils\";\nimport { almostEvenlySpacedIntegers, randomUniqueIntegers } from \"./utils/number_utils\";\nimport { getFaithPoints } from \"./props\";\n\n/**\n * Initializes a new world to the given width and height where 0 turns\n * have elapsed.\n * @param width the width\n * @param height the height\n * @returns A brand new world where 0 turns have elapsed\n */\nfunction initWorld(width: number, height: number): World {\n\treturn createWorld(width, height);\n}\n\n/**\n * @returns The array of phases\n */\nfunction initPhases(): Array<Phase> {\n\treturn [\n\t\tcreatePhase(\"spawn\", spawnPhase),\n\t\tcreatePhase(\"temperatureRise\", temperatureRisePhase),\n\t\tcreatePhase(\"convertEnemies\", spreadConvictionPhase),\n\t\tcreatePhase(\"spreadIgnorance\", spreadConvictionPhase),\n\t\tcreatePhase(\"move\", movePhase),\n\t\tcreatePhase(\"play\", playPhase),\n\t\tcreatePhase(\"enemyFlee\", enemyFleePhase)\n\t];\n}\n\n/**\n * Randomly initializes spawners\n * @param world the world where the spawners are created\n * @param minSpawners the minimum number of returned spawners\n * @param maxSpawners the maximum number of returned spawners\n * @param spawnersParallelAxis the returned spawners can reach each other by a translation along this axis\n * @param spawnerLineNumber the coordinate of the returned position on the not-given axis\n * @param averageSpawnsPerPhase number representing the average of the sum of spawns during the spawn phase, for the returned spawners.\n * Note that this number is inferior to the actual number of returned spawners.\n * @returns an array of 1 to maxSpawners spawners with unique positions, that all have the same coordinate value on the axis that was not given\n * and that have the same probability of making someone spawn per spawn phase.\n */\nfunction initSpawners(world: World, minSpawners: number, maxSpawners: number, spawnersParallelAxis : Axis, spawnerLineNumber: number, averageSpawnsPerPhase: number = 0.6): Array<Actor> {\n\tif (minSpawners < 1) {\n\t\tthrow new Error(\"There should be at least one spawner in the game.\");\n\t}\n\tconst spawnersPerpendicularAxisCoord = randomUniqueIntegers(minSpawners, maxSpawners, 0, spawnersParallelAxis === \"x\" ? world.width : world.height);\n\tconst spawnProba = averageSpawnsPerPhase / spawnersPerpendicularAxisCoord.length;\n\treturn createPositionsAlongAxis(spawnersParallelAxis, spawnersPerpendicularAxisCoord, spawnerLineNumber).map((spawnerPosition) => createSpawner(spawnerPosition, spawnProba));\n}\n\n/**\n * Randomly initializes grounds\n * @param world the world where the grounds are created\n * @param minGroundsPerLine the minimum number of created grounds per line along the groundsAxis\n * @param maxGroundsPerLine the maximum number of created grounds per line along the groundsAxis\n * @param groundsAxis the returned grounds can reach each other by a translation along this axis\n * @param groundLineNumbers the coordinates of the returned positions on the not-given axis (for each line where ground are created)\n * @param numberOfGroundLines The number of lines of grounds (in groundsAxis direction) where grounds are created\n * @returns an array of numberOfGroundLines to maxGroundsPerLine * numberOfGroundLines grounds with unique positions\n */\nfunction initGroundWaypoints(world: World, minGroundsPerLine: number, maxGroundsPerLine: number, groundsAxis : Axis, groundLineNumbers: Array<number>, numberOfGroundLines: number): Array<Array<Actor>> {\n\treturn Array.from({ length: numberOfGroundLines },\n\t\t(_, index) => (randomPositionsAlongAxis(world, minGroundsPerLine, maxGroundsPerLine, groundsAxis, groundLineNumbers[index])\n\t\t.map((groundPosition) => createGround(groundPosition, index + 1)))\n\t\t);\n}\n\n/**\n * Randomly initializes spaghettiMonsters\n * @param world the world where the spaghettiMonsters are created\n * @param minSpaghettiMonsters the minimum number of returned spaghettiMonsters\n * @param maxSpaghettiMonsters the maximum number of returned spaghettiMonsters\n * @param spaghettiMonstersAxis the returned spaghettiMonsters can reach each other by a translation along this axis\n * @param spaghettiMonstersLineNumber the coordinate of the returned position on the not-given axis\n * @param waypointNumber the waypointNumber of the spaghettiMonsters\n * @returns an array of 1 to maxSpaghettiMonsters spaghettiMonsters with unique positions, that all have the same coordinate value on the axis that was not given\n */\nfunction initspaghettiMonsters(world: World, minSpaghettiMonsters: number, maxSpaghettiMonsters: number, spaghettiMonstersAxis : Axis, spaghettiMonstersLineNumber: number, waypointNumber: number): Array<Actor> {\n\treturn randomPositionsAlongAxis(world, minSpaghettiMonsters,  maxSpaghettiMonsters, spaghettiMonstersAxis, spaghettiMonstersLineNumber)\n\t.map((spaghettiMonsterPosition) => createSpaghettiMonster(spaghettiMonsterPosition, waypointNumber));\n}\n\n/**\n * Randomly creates the waypoints of the world (creates spawners, ground, and spaghettiMonster)\n * @param world the world on which the waypoints are created\n * @param intermediateWaypointsNumber the number of waypoints that have to be reached by the moving actors (spawner and spaghettiMonster not included)\n * @param averageSpawnsPerPhase number representing the average of the sum of spawns during the spawn phase, for the returned spawners.\n * Note that this number is inferior to the actual number of returned spawners.\n * @returns the created waypoints of the world\n */\nfunction initWayPointActors(world: World, intermediateWaypointsNumber: number, spawnersAxis: Axis, averageSpawnsPerPhase?: number, minSpawners: number = 1, maxSpawners: number = 3): Array<Array<Actor>>{\n\tconst maxLineNumber: number = spawnersAxis === \"x\" ? world.height - 1 : world.width - 1;\n\tconst spawnerLineNumber: number = Math.random() < 0.5 ? 0 : maxLineNumber;\n\tconst spaghettiMonsterLineNumber = maxLineNumber - spawnerLineNumber;\n\tconst intermediateWaypointsLineNumber: Array<number> =\n\talmostEvenlySpacedIntegers(intermediateWaypointsNumber, spaghettiMonsterLineNumber ? 0 : maxLineNumber, spaghettiMonsterLineNumber);\n\treturn [initSpawners(world, minSpawners,  maxSpawners, spawnersAxis, spawnerLineNumber, averageSpawnsPerPhase)]\n\t.concat(initGroundWaypoints(world, 1, Math.random() < 0.7 ? 2 : 1, spawnersAxis, intermediateWaypointsLineNumber, intermediateWaypointsNumber))\n\t.concat([initspaghettiMonsters(world, 1, 1, spawnersAxis, spaghettiMonsterLineNumber, intermediateWaypointsNumber + 1)]);\n}\n\n/**\n * Initializes the actors. Should be used at the beginning of the game\n * @param world the world where the actors are created\n * @param intermediateWaypointLinesNumber the number of waypoints that the actors need to cross between the spawners and the spaghettiMonsters\n * @param averageSpawnsPerPhase number representing the average of the sum of spawns during the spawn phase, for the returned spawners.\n * Note that this number is inferior to the actual number of returned spawners.\n * @returns the first actors of the game.\n */\nfunction initActors(world: World, intermediateWaypointLinesNumber: number, spawnersAxis: Axis, averageSpawnsPerPhase?: number, playProba?: number, minSpawners?: number, maxSpawners?: number): Array<Actor> {\n\tconst waypoints: Array<Array<Actor>> = initWayPointActors(world, intermediateWaypointLinesNumber, spawnersAxis, averageSpawnsPerPhase, minSpawners, maxSpawners);\n\treturn waypoints.flat()\n\t.concat(positionsLinking(waypoints.map((waypointsSameValue) => waypointsSameValue.map((waypoint) => waypoint.position)), otherAxis(spawnersAxis))\n\t.map((position) => createGround(position))).concat(createPlayer(playProba));\n}\n\n/**\n * Ensures all proposed actors are in a valid state and if they are not, resolves the conflict\n * @param world The world where the actors are\n * @param actors The state of the actors before the proposal of their new state was made\n * @param proposals We want to know if these actors are valid\n * @returns An array of actor with valid states and no conflicts\n */\nfunction resolveProposals(world: World, actors: Array<Actor>, proposals: Array<Actor>): Array<Actor> {\n\treturn proposals.reduce((acc: Array<Actor>, currentProposal: Actor, actorIndex: number) => {\n\t\tif (currentProposal === undefined) throw new Error(\"undefined actor\");\n\t\tif (isValidActorInEnvironment(world, currentProposal)) {\n\t\t\tif(isWalker(currentProposal) &&\n\t\t\t!(filterByKinds(actors, [\"ground\", \"spawner\", \"spaghettiMonster\"])\n\t\t\t.find((currentGround) => isDeepStrictEqual(currentGround.position, currentProposal.position))\n\t\t\t)) {\n\t\t\t\treturn acc;\n\t\t\t}\n\t\t\treturn acc.concat(currentProposal);\n\t\t}\n\t\treturn acc;\n\t}, []);\n}\n\n/**\n * Computes the next turn of a world according to its phases and actors.\n * @param phases The phases\n * @param world The world\n * @param actors The actors\n * @param spawnersAxis The axis that is parallel to the line that links the spawners\n * @returns A new array of actors\n */\nfunction nextTurn(phases: Array<Phase>, world: World, actors: Array<Actor>, spawnersAxis: Axis): Array<Actor> {\n\treturn phases.reduce((actorsAcc, aPhase) => {\n\t\tconst proposals: Actor[]\n\t\t\t= aPhase.executePhase(actorsAcc,\n\t\t\t\tactorsAcc.map((actingActor) => actingActor.actions[aPhase.funcName]({actorsAcc, actingActor, world, spawnersAxis}) as any /* ReturnType<ActorActions[keyof ActorActions]> */)\n\t\t\t);\n\t\treturn resolveProposals(world, actorsAcc, proposals);\n\t}, actors);\n}\n\n/**\n * A function that plays the game and displays its state at every turn.\n * @param display The display function that displays a world and its actors\n */\nfunction playGame(display: (world: World, actors: Array<Actor>) => void): void {\n\tconst world: World = initWorld(10, 10);\n\tconst spawnersAxis: Axis = Math.random() < 0.5 ? \"x\" : \"y\";\n\tconst playProba = 0.25;\n\tconst spawnProba = 1;\n\tconst intermediateWaypointLinesNumber = 2;\n\tlet actors: Array<Actor> = initActors(world, intermediateWaypointLinesNumber, spawnersAxis, spawnProba, playProba);\n\tconst phases: Array<Phase> = initPhases();\n\tconsole.log(`\\n\\x1b[32m PASTAFARIST \\x1b[0m\\n`);\n\tlet turnCounter = 0; // in a purely functional way, an actor containing the turns combined with an incrementTurn action and an updateTurn phase could be made\n\tconst maxTurn = 20;\n\twhile (turnCounter < maxTurn && filterByKinds(actors, [\"spaghettiMonster\"]).some((spaghettiMonster) => getFaithPoints(spaghettiMonster) > 0)) {\n\t\tdisplay(world, actors);\n\t\tactors = nextTurn(phases, world, actors, spawnersAxis);\n\t\t++turnCounter;\n\t}\n\tdisplay(world, actors);\n\n\tif (filterByKinds(actors, [\"spaghettiMonster\"]).some((spaghettiMonster) => getFaithPoints(spaghettiMonster) > 0)) {\n\t\tconsole.log(\"Some spaghetti monsters still have faith, you won the game! :)\");\n\t} else {\n\t\tconsole.log(\"Not a single spaghetti monsters still has faith, you lost the game! :(\");\n\t}\n}\n\n\nexport { playGame, initWorld, initPhases, initActors, initSpawners, nextTurn, initGroundWaypoints };","import type { Vector2D } from \"./utils/geometry\";\nimport type { ActorActions } from \"./actor_actions\";\nimport type { Actor, Walker, ActionGenerators } from \"./actor\";\n\nimport { createVector } from \"./utils/geometry\";\nimport { findNextWaypointTarget } from \"./actor\";\nimport { throwErrorIfUndefined, executeFunctionEveryNCall } from \"./utils/other_utils\";\nimport { defaultActions, spreadIgnorance, moveTowardWaypointTarget, temperatureRise, spawn, play, convertEnemies,\n\tenemyFlee, createDefaultActionGenerator } from \"./actor_actions\";\nimport { setConviction, setFaithPoints, setMaxFaith, setSpawnProba, setWaypointNumber, setWaypointTargetAndNumber,\n\tsetFaithPointsAndMax, setSpreadIgnorancePower, setRange, setPlayProba } from \"./props\";\n\n/**\n * Actor constructor\n * @param position The position of the created Actor\n * @param actionGenerators The generators of the actions of the created actor\n * @param actions The actions of the created Actor\n * @param kind The kind of the created Actor\n * @param externalProps The data or parameters concerning the created actor\n * @returns A new actor\n */\nfunction createActor(position: Actor[\"position\"], actionGenerators: Partial<Actor[\"actionGenerators\"]>,\n\tactions: Partial<Actor[\"actions\"]>, kind: Actor[\"kind\"], externalProps?: Actor[\"externalProps\"] ): Actor\n{\n\tconst actorActions: Actor[\"actions\"] = { ...defaultActions, ...actions };\n\tconst defaultActionsGenerators: ActionGenerators = Object.keys(actorActions).reduce((acc, key: keyof ActorActions) => {\n\t\tconst action = actorActions[key];\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t//@ts-ignore\n\t\tacc[key] = createDefaultActionGenerator(action);\n\t\treturn acc;\n\t}, {} as ActionGenerators);\n\tconst actorActionsGenerators: Actor[\"actionGenerators\"] = {...defaultActionsGenerators, ...actionGenerators};\n\treturn { position, actionGenerators: actorActionsGenerators, actions: actorActions, kind, externalProps };\n}\n\n/**\n * Constructor for a default \"ignorant\" actor\n * @param position the position where the ignorant is in the world\n * @param waypointTarget the next position that the ignorant has to reach\n * @param faithPoints the level of faithPoints of the ignorant\n * @returns the created Actor of kind \"ignorant\"\n */\nfunction createIgnorant(position: Vector2D, waypointTarget: Vector2D, faithPoints: number = 100): Actor {\n\tthrowErrorIfUndefined(waypointTarget);\n\treturn setWaypointTargetAndNumber(\n\t\t\t\tsetFaithPointsAndMax(\n\t\t\t\t\t\tsetConviction(\n\t\t\t\t\t\t\tcreateActor(position,\n\t\t\t\t\t\t\t\t{ move: executeFunctionEveryNCall(moveTowardWaypointTarget, defaultActions[\"move\"], 2) },\n\t\t\t\t\t\t\t\t{ move: moveTowardWaypointTarget, temperatureRise, enemyFlee },\n\t\t\t\t\t\t\t\t\"ignorant\")\n\t\t\t\t\t\t,10)\n\t\t\t\t,faithPoints, 100)\n\t,waypointTarget, 1);\n}\n\n/**\n * Constructor for a default \"ignoranceSpreader\" actor\n * @param position the position where the ignoranceSpreader is in the world\n * @param waypointTarget the next position that the ignoranceSpreader has to reach\n * @param faithPoints the level of faithPoints of the ignoranceSpreader\n * @param spreadIgnorancePower this value indicates how much the created \"ignoranceSpreader\" can increase the faith of the \"ignorant\" actors\n * in its range\n * @param range the range in which the ignoranceSpreader can affect the ignorants\n * @returns the created Actor of kind \"ignoranceSpreader\"\n */\nfunction createIgnoranceSpreader(position: Vector2D, waypointTarget: Vector2D, faithPoints: number = 70, spreadIgnorancePower: number = 5, range: number = 3): Actor {\n\tthrowErrorIfUndefined(waypointTarget);\n\treturn setWaypointTargetAndNumber(\n\t\t\tsetFaithPointsAndMax(\n\t\t\t\tsetSpreadIgnorancePower(\n\t\t\t\t\tsetRange(\n\t\t\t\t\t\tcreateActor(position,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t{ move: moveTowardWaypointTarget, spreadIgnorance, enemyFlee },\n\t\t\t\t\t\t\t\"ignoranceSpreader\")\n\t\t\t\t\t,range)\n\t\t\t\t,spreadIgnorancePower)\n\t\t\t,faithPoints, 70)\n\t\t,waypointTarget, 1);\n}\n\n/**\n * Type that should be respected for creating a dictionnary containing the constructors of the Actors that can move by themselves during the move Phase.\n * see {@link walkerCreator}\n */\ntype WalkerCreator = {\n\t[key in Walker]: (position: Vector2D, waypointTarget: Vector2D, faithPoints?: number) => Actor\n};\n\n/**\n * Constructors for the Actors that can move by themselves during the move Phase.\n * The elements of the dictionnary are constrained by the type {@link WalkerCreator}\n */\nconst walkerCreator: WalkerCreator = {\n\tignorant: createIgnorant,\n\tignoranceSpreader: createIgnoranceSpreader\n};\n\n/**\n * Generic fonction called to create Actors that can move by themselves during the move Phase.\n * Those Actors are listed in the type {@link Walker}.\n * @param kind the kind of the created Actor\n * @param path the waypoints constraining the path on which the Actor will move\n * @param position the position of the created Actor\n * @param faithPoints the faithPoints of the created Actor\n * @returns the created Actor whose kind is listed in the type {@link Walker}\n */\nfunction createWalker(kind: Walker, path: Array<Actor>, position: Vector2D, faithPoints?: number): Actor {\n\tconst firstWaypoint = findNextWaypointTarget(path, position, 0);\n\treturn walkerCreator[kind](position, firstWaypoint.waypointTarget, faithPoints);\n}\n\n/**\n * Constructor for a default \"spawner\" actor\n * @param position the position where the spawner is in the world\n * @param spawnProba number in [0, 1] representing the probability during each spawn phase to create a new Actor\n * @returns the created Actor of kind \"spawner\"\n */\nfunction createSpawner(position: Vector2D, spawnProba: number = 0.3): Actor {\n\treturn setSpawnProba(\n\t\t\tsetWaypointNumber(\n\t\t\t\tcreateActor(position, {}, { spawn }, \"spawner\")\n\t\t\t, 0)\n\t\t,spawnProba);\n}\n\n/**\n * Constructor for a default \"ground\" actor\n * @param position the position of the ground\n * @param waypointNumber the number indexing the order in which the waypoints have to be reached\n * @returns the created Actor of kind \"ground\"\n */\nfunction createGround(position: Vector2D, waypointNumber?: number): Actor {\n\treturn waypointNumber ? setWaypointNumber(createActor(position, {}, {}, \"ground\"), waypointNumber) : createActor(position, {}, {}, \"ground\");\n}\n\n/**\n * Constructor for a default \"goodGuy\" actor\n * @param position the position of the goodGuy\n * @param range the range in which the goodGuy can affect the walkers\n * @param conviction the conviction defines how impacting the goodGuy is on the walkers\n * @returns the created Actor of kind \"goodGuy\"\n */\nfunction createGoodGuy(position: Vector2D, range: number = 2, conviction: number = 9): Actor {\n\treturn setRange(\n\t\t\tsetConviction(\n\t\t\t\tcreateActor(position, {}, {convertEnemies}, \"goodGuy\")\n\t\t\t,conviction)\n\t\t,range);\n}\n\n/**\n * Constructor for a default \"spaghettiMonster\" actor\n * @param position the position of the goodGuy\n * @param waypointNumber the number indexing the order in which the waypoints (including the spaghettiMonster) have to be reached\n * @param faithPoints the faith of the spaghettiMonster. The game is lost when its faithPoints reach 0.\n * @returns the created Actor of kind \"spaghettiMonster\"\n */\nfunction createSpaghettiMonster(position: Vector2D, waypointNumber: number, faithPoints: number = 100): Actor {\n\treturn setWaypointNumber(\n\t\t\tsetFaithPoints(\n\t\t\t\tsetMaxFaith(\n\t\t\t\t\tcreateActor(position, {}, {}, \"spaghettiMonster\")\n\t\t\t\t,100)\n\t\t\t,faithPoints)\n\t\t,waypointNumber);\n}\n\n/**\n * Constructor for a default \"player\" actor\n * @param playProba the probability for the player to play, for each play Phase\n * @returns the created Actor of kind \"player\"\n */\nfunction createPlayer(playProba: number = 0.25): Actor {\n\treturn setPlayProba(\n\t\t\tcreateActor(createVector(0, 0), {}, { play: play }, \"player\")\n\t\t,playProba);\n}\n\nexport { createActor, createGround, createSpaghettiMonster, createSpawner, createIgnoranceSpreader, createWalker, createIgnorant,\n\tcreatePlayer, createGoodGuy };","import type { Actor, Kind } from \"./actor\";\nimport type { Vector2D } from \"./utils/geometry\";\nimport type { Axis } from \"./utils/other_utils\";\nimport type { World } from \"./world\";\n\nimport { getRandomPositionNotInGivenPositions, getEmptyCellInRange } from \"./world\";\nimport { isDeepStrictEqual, otherAxis } from \"./utils/other_utils\";\nimport { randomUniqueMinIntegers } from \"./utils/number_utils\";\nimport { arrayWithoutElementAtIndex } from \"./utils/array_utils\";\nimport { createWalker } from \"./actor_creators\";\nimport { euclideanDistance, createVector, movingVector } from \"./utils/geometry\";\nimport { getConviction, getWaypointTarget, getRange, getSpawnProba, getSpreadIgnorancePower, getFaithPoints, getPlayProba } from \"./props\";\nimport { filterActorsByPosition, filterByKinds, hasOneOfKinds, walkerKeys, kindKeys } from \"./actor\";\nimport { axisLength } from \"./world\";\n\n/**\n * uniform parameters that the actions must have.\n * \n * actorsAcc: All the actors that the action can take into consideration\n * actingActor: The actor doing the action\n * world: The world on which the action takes place\n * spawnerAxis: The axis along which the spawners were created on the world\n */\ntype ActorActionParams = {actorsAcc: Array<Actor>, actingActor: Actor, world: World, spawnersAxis: Axis};\n\n/**\n * All the possibles actions for an actor. These actions are called during the phases of the game.\n */\ntype ActorActions = {\n\tspawn: (params: ActorActionParams) => Actor | undefined;\n\ttemperatureRise: (params: ActorActionParams) => number;\n\tconvertEnemies: (params: ActorActionParams) => ReturnType<typeof impactActorsConviction>;\n\tspreadIgnorance: (params: ActorActionParams) => ReturnType<typeof impactActorsConviction>;\n\tenemyFlee: (params: ActorActionParams) => boolean;\n\tmove: (params: ActorActionParams) => Vector2D;\n\tplay: (params: ActorActionParams) => Vector2D | undefined;\n};\n\n/**\n * Contains the signatures that the action generators of the Actors must respect\n */\ntype ActionGenerators = {\n\t[Key in keyof ActorActions]: [() => ActionGenerators[Key], ActorActions[Key]];\n};\n\n/**\n * Creates a default action generator for the given action.\n * @param action the action we want to decorate to create a generator returning functions to use after the use of the given function\n * @returns an action generator that will always return the same generator and the same action as the given action\n */\nfunction createDefaultActionGenerator<Key extends keyof ActorActions>(action: ActorActions[Key]): ActionGenerators[Key] {\n\treturn [() => createDefaultActionGenerator(action), action] as ActionGenerators[Key];\n}\n\n/**\n * All the default actions, so that each Phase can be called on each actor, even if the actor hasn't its specific phase function\n */\nconst defaultActions: ActorActions = {\n\tspawn: (params) => undefined,\n\ttemperatureRise: (params) => 0,\n\tspreadIgnorance: (params) => { return { impactedActorsIndices: [], impactAmounts: [] }; },\n\tconvertEnemies: (params) => { return { impactedActorsIndices: [], impactAmounts: [] }; },\n\tenemyFlee: (params) => false,\n\tmove: (params) => { return createVector(0, 0); },\n\tplay: (params) => undefined\n};\n\n/**\n * The \"spawner\" action.\n * It has a 50% chance to spawn a new actor, which has 70% chance to be an ignorant, or 30% chance to be an ignoranceSpreader.\n * @param params The uniform parameters for the actions. See {@link ActorActionParams} for further details.\n * @returns A new actor to be spawned\n */\nfunction spawn(params: ActorActionParams): ReturnType<ActorActions[\"spawn\"]> {\n\tif (Math.random() < getSpawnProba(params.actingActor)) {\n\t\tif (Math.random() < 0.7)\n\t\t\treturn createWalker(\"ignorant\", params.actorsAcc, params.actingActor.position);\n\t\telse\n\t\t\treturn createWalker(\"ignoranceSpreader\", params.actorsAcc, params.actingActor.position);\n\t}\n\treturn undefined;\n}\n\n/**\n * The \"temperatureRise\" action.\n * It returns the damage done to the spaghetti monster. The actor only does damage if it's on the same\n * position as the spaghetti monster\n * @param params The uniform parameters for the actions. See {@link ActorActionParams} for further details.\n * @returns The amount of damage to do to the spaghetti monster\n */\nfunction temperatureRise(params: ActorActionParams): ReturnType<ActorActions[\"temperatureRise\"]> {\n\treturn params.actorsAcc.find((a) => hasOneOfKinds(a, [\"spaghettiMonster\"]) && isDeepStrictEqual(a.position, params.actingActor.position))\n\t=== undefined ? 0 : getConviction(params.actingActor);\n}\n\n/**\n * Filter the actors whose faith must be impacted (positively or negatively) and return an object containing their indices and how much their faith is impacted\n * @param actors the actors from which the impacted actors are filtered\n * @param actingActor the actor that is impacting the faith of the other actors\n * @param impactedKinds the kinds of the actors that can be impacted by the actingActor\n * @param impactFunction the function defining the value by which the faith of the actors is impacted\n * @returns an object containing:\n * - the indices, in the given actors, of the impacted actors\n * - the values corresponding to how much the faithPoints of the impacted actors are impacted\n */\nfunction impactActorsConviction(actors: Array<Actor>, actingActor: Actor, impactedKinds: Array<Kind>,\n\timpactFunction: (impactingActor: Actor, actorsToImpact: Array<Actor>) => Array<number>,\n\t): { impactedActorsIndices: Array<number>, impactAmounts: Array<number>; }\n{\n\tconst impactedActorsIndices: Array<number> = actors.reduce((acc: Array<number>, currentActor: Actor, actorIndex: number) =>\n\t\thasOneOfKinds(currentActor, impactedKinds) && euclideanDistance(currentActor.position, actingActor.position) <= getRange(actingActor) ?\n\t\tacc.concat(actorIndex) :\n\t\tacc,\n\t\t[]);\n\tconst impactAmounts = impactFunction(actingActor, impactedActorsIndices.map((i) => actors[i]));\n\treturn { impactedActorsIndices, impactAmounts };\n}\n\n/**\n * The \"spreadIgnorance\" action.\n * It returns all the actors the actor will spread faithPoints to, and the amount for which every actor will be impacted.\n * @param params The uniform parameters for the actions. See {@link ActorActionParams} for further details.\n * @returns all the actors the actor will spread faithPoints to, and the amount for which every actor will be impacted.\n */\nfunction spreadIgnorance(params: ActorActionParams): ReturnType<ActorActions[\"spreadIgnorance\"]> {\n\treturn impactActorsConviction(params.actorsAcc, params.actingActor, [\"ignorant\"],\n\t(impactingActor, actorsToImpact) => Array.from({length: actorsToImpact.length}, (_) => getSpreadIgnorancePower(impactingActor)));\n}\n\n/**\n * The \"convertEnemies\" action.\n * It returns all the actors that will be damaged, and the amount for which every actor damaged will be damaged\n * @param params The uniform parameters for the actions. See {@link ActorActionParams} for further details.\n * @returns all the actors that will be damaged, and the amount for which every actor damaged will be damaged\n */\nfunction convertEnemies(params: ActorActionParams): ReturnType<ActorActions[\"convertEnemies\"]> {\n\treturn impactActorsConviction(params.actorsAcc, params.actingActor, [...walkerKeys],\n\t(impactingActor, actorsToImpact) => Array.from({length: actorsToImpact.length}, (_) => -1 * getConviction(impactingActor)));\n}\n\n/**\n * A \"move\" action\n * Returns the movement vector corresponding to the movement that the given actor should do to get closer to its waypointTarget\n * @param params The uniform parameters for the actions. See {@link ActorActionParams} for further details.\n * @returns the movement vector corresponding to the movement that the given actor should do to get closer to its waypointTarget\n */\nfunction moveTowardWaypointTarget(params: ActorActionParams): ReturnType<ActorActions[\"move\"]> {\n\treturn movingVector(params.actingActor.position, getWaypointTarget(params.actingActor), otherAxis(params.spawnersAxis));\n}\n\n/**\n * The \"enemyFlee\" action.\n * It returns whether the actor will decide to not exist or not.\n * @param params The uniform parameters for the actions. See {@link ActorActionParams} for further details.\n * @returns true iif the current actor decides to not exist anymore\n */\nfunction enemyFlee(params: ActorActionParams): ReturnType<ActorActions[\"enemyFlee\"]> {\n\treturn hasOneOfKinds(params.actingActor, [...walkerKeys, \"spaghettiMonster\"]) ? getFaithPoints(params.actingActor) <= 0 : false;\n}\n\n/**\n * Can be used for inside \"play\" actions\n * Returns a good positions, or undefined if no good position avaible\n * @param params The uniform parameters for the actions. See {@link ActorActionParams} for further details.\n * @returns a good positions, or undefined if no good position avaible\n */\nfunction playPriorityAroundLoneGrounds(params: ActorActionParams, range: number, distanceFunction: (a: Vector2D, b: Vector2D) => number)\n: Vector2D | undefined \n{\n\tconst numberOfLines = axisLength(params.world, otherAxis(params.spawnersAxis));\n\tconst consideredLineOrder: Array<number> = randomUniqueMinIntegers(numberOfLines, numberOfLines, 0, numberOfLines);\n\tconst groundListPerLine: Array<Array<Actor>> = consideredLineOrder.map(\n\t\t(consideredLine) => filterByKinds(\n\t\t\tparams.spawnersAxis === \"x\" ?\n\t\t\tfilterActorsByPosition(params.actorsAcc, undefined, consideredLine) :\n\t\t\tfilterActorsByPosition(params.actorsAcc, consideredLine, undefined),\n\t\t\t[\"ground\", \"spawner\", \"spaghettiMonster\"]\n\t\t));\n\tconst returnedGroundAroundWhichToPlay: Actor | undefined = Array.from({ length: axisLength(params.world, params.spawnersAxis) - 1 }, (_, i) => i + 1)\n\t.reduce((acc, groundListPerLineConstraint) => {\n\t\tif (acc) return acc;\n\t\treturn groundListPerLine.reduce((acc2, currentGrounds) => {\n\t\t\tif (acc2) return acc2;\n\t\t\tif (currentGrounds.length === groundListPerLineConstraint) {\n\t\t\t\tconst actorsWithoutPlayers: Actor[] = params.actorsAcc.filter((a) => !hasOneOfKinds(a, [\"player\"]));\n\t\t\t\tconst groundAroundWhichToPlay: Actor | undefined = currentGrounds\n\t\t\t\t.find((currentGround) => getEmptyCellInRange(params.world, actorsWithoutPlayers, currentGround.position, range, distanceFunction));\n\t\t\t\treturn groundAroundWhichToPlay;\n\t\t\t}\n\t\t\treturn acc2;\n\t\t}\n\t\t, undefined);\n\t}, undefined);\n\treturn returnedGroundAroundWhichToPlay ?\n\tgetEmptyCellInRange(params.world, params.actorsAcc, returnedGroundAroundWhichToPlay.position, range, euclideanDistance) :\n\tundefined;\n}\n\n/**\n * A \"play\" action\n * Returns a random valid position for the play action\n * @param params The uniform parameters for the actions. See {@link ActorActionParams} for further details.\n * @returns a random valid position for the play action, or undefined if no positions avaible\n */\nfunction playRandomValid(params: ActorActionParams): ReturnType<ActorActions[\"play\"]> {\n\treturn getRandomPositionNotInGivenPositions(\n\t\tparams.world, \n\t\tfilterByKinds(params.actorsAcc, arrayWithoutElementAtIndex([...kindKeys], [...kindKeys].indexOf(\"player\"))).map((a) => a.position)\n\t);\n}\n\n/**\n * A \"play\" action\n * Returns a good positions, or if no good position found, returns a random valid action for the play action, or undefined if no position avaible\n * @param params The uniform parameters for the actions. See {@link ActorActionParams} for further details.\n * @returns a good positions, or if no good position found, returns a random valid action for the play action, or undefined if no position avaible\n */\nfunction play(params: ActorActionParams): ReturnType<ActorActions[\"play\"]> {\n\tif (Math.random() > getPlayProba(params.actingActor)) return undefined;\n\tconst range = 2;\n\tconst distanceFunction = euclideanDistance;\n\treturn playPriorityAroundLoneGrounds(params, range, distanceFunction) ??\n\tplayRandomValid(params);\n}\n\nexport type { ActorActions, ActionGenerators, ActorActionParams };\n\nexport { temperatureRise, spreadIgnorance, convertEnemies, enemyFlee, spawn, moveTowardWaypointTarget,\n\tdefaultActions, play, impactActorsConviction, createDefaultActionGenerator, playPriorityAroundLoneGrounds};","import type { Actor } from \"./actor\";\nimport type { ActorActions } from \"./actor_actions\";\n\n/**\n * A phase. It takes the result of all the actions of the actors and returns a new\n * array of actors with the actions applied. It does not resolve conflicts.\n * It is mapped according to {@link ActorActions} for consistency.\n */\ntype Phase = {\n    [Key in keyof ActorActions]: {\n        funcName: Key;\n        executePhase: (oldActors: Array<Actor>, phaseResults: Array<ReturnType<ActorActions[Key]>>) => Array<Actor>;\n    }\n}[keyof ActorActions];\n\n/**\n * Constructor for a phase\n * @param funcName The name of the phase\n * @param executePhase The function that computes the new actor array according to the results of the phase from all the actors\n * @returns A new phase\n */\nfunction createPhase<Key extends keyof ActorActions>(funcName: Key & (keyof ActorActions),\n    executePhase: (oldActors: Array<Actor>, phaseResults: Array<ReturnType<ActorActions[Key]>>) => Array<Actor>): Phase {\n    return { funcName: funcName, executePhase: executePhase } as Phase;\n}\n\nexport type { Phase };\n\nexport { createPhase };","import type { ActorActions } from \"./actor_actions\";\nimport { Actor, hasOneOfKinds, walkerKeys } from \"./actor\";\nimport type { Vector2D } from \"./utils/geometry\";\n\nimport { translateAndUpdateWaypoint} from \"./actor\";\nimport { sum } from \"./utils/array_utils\";\nimport { createGoodGuy } from \"./actor_creators\";\nimport { getFaithPoints, getMaxFaith, setFaithPoints } from \"./props\";\nimport { impactActorsConviction } from \"./actor_actions\";\n\n/**\n * The executePhase function for the \"spawn\" phase.\n * All it does is spawn new actors if there are to be spawned.\n * @param oldActors The actors before the phase\n * @param phaseResult The results of the phase\n * @returns A proposal for the actors after executing the \"spawn\" phase\n */\nfunction spawnPhase(oldActors: Array<Actor>, phaseResult: Array<ReturnType<ActorActions[\"spawn\"]>>): Array<Actor> {\n\treturn oldActors.concat(\n\t\tphaseResult\n\t\t.filter((returnedActor): returnedActor is Actor => returnedActor !== undefined)\n\t);\n}\n\n/**\n * The executePhase function for the \"spawn\" phase.\n * All it does is spawn new actors if there are to be spawned.\n * @param oldActors The actors before the phase\n * @param phaseResult The results of the phase\n * @returns A proposal for the actors after executing the \"spawn\" phase\n */\nfunction playPhase(oldActors: Array<Actor>, phaseResult: Array<ReturnType<ActorActions[\"play\"]>>): Array<Actor> {\n\treturn oldActors.concat(\n\t\tphaseResult\n\t\t.filter((returnedVector) => returnedVector !== undefined)\n\t\t.map((vector: Vector2D) => createGoodGuy(vector))\n\t);\n}\n\n/**\n * The executePhase function for the \"temperatureRise\" phase.\n * It inflicts \"damage\" to the Spaghetti Monster, our defense target.\n * @param oldActors The actors before the phase\n * @param phaseResult The results of the phase\n * @returns A proposal for the actors after executing the \"temperatureRise\" phase\n */\nfunction temperatureRisePhase(oldActors: Array<Actor>, phaseResult: Array<ReturnType<ActorActions[\"temperatureRise\"]>>): Array<Actor> {\n\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\treturn oldActors.map((currentActor) => hasOneOfKinds(currentActor, [\"spaghettiMonster\"]) ?\n\tsetFaithPoints(currentActor, getFaithPoints(currentActor) - sum(phaseResult)):\n\tcurrentActor);\n}\n\n/**\n * The executePhase function for the \"move\" phase.\n * It makes the given actors move along the path generated from the spawners to the spaghettiMonsters\n * @param oldActors The actors before the phase\n * @param phaseResult The results of the phase\n * @returns A proposal for the actors after executing the \"move\" phase\n */\nfunction movePhase(oldActors: Array<Actor>, phaseResults: Array<ReturnType<ActorActions[\"move\"]>>): Array<Actor> {\n\treturn phaseResults.map(\n\t\t(phaseResult, actorIndex) => {\n\t\t\tconst newActor: Actor = translateAndUpdateWaypoint(oldActors, oldActors[actorIndex], phaseResult);\n\t\t\treturn ({...newActor,\n\t\t\t\tactions: {...newActor.actions, move: newActor.actionGenerators[\"move\"][1]},\n\t\t\t\tactionGenerators: {...newActor.actionGenerators, move: newActor.actionGenerators[\"move\"][0]() }});\n\t\t}\n\t);\n}\n\n/**\n * Returns the given actor, with its ignorance updated by taking into consideration the spreadConvictionResults\n * @param actor the actor whose ignorance must be updated using the spreadConvictionResults\n * @param actorIndex the index by which the actor is referenced in spreadConvictionResults.impactedActorsIndices\n * @param spreadConvictionResults array of objects containing unique indices referencing the actor to update, and the\n * values by which the ignorance of the actors are impacted\n * @returns the given actor, with its ignorance updated by taking into consideration the spreadConvictionResults\n */\nfunction updateIgnorance(actor: Actor, actorIndex: number, spreadConvictionResults: Array<ReturnType<typeof impactActorsConviction>>): Actor {\n\treturn setFaithPoints(actor, \n\t\tMath.min(spreadConvictionResults.reduce((ignoranceAcc, spreadIgnoranceResult) =>\n\t\t\t\t\tignoranceAcc + (spreadIgnoranceResult.impactAmounts[spreadIgnoranceResult.impactedActorsIndices.indexOf(actorIndex)] ?? 0),\n\t\t\t\t\tgetFaithPoints(actor)), getMaxFaith(actor))\n\t);\n}\n\n/**\n * The executePhase function for the phase about converting people to a religion.\n * Ignorants can get slowly converted to our holy faith; pastafarism, or they could be comforted in their ignorance...\n * @param oldActors The actors before the phase\n * @param spreadConvictionVectors The results of the phase\n * @returns A proposal for the actors after executing the \"convertEnemies\" phase\n */\nfunction spreadConvictionPhase(oldActors: Array<Actor>, spreadConvictionVectors: Array<ReturnType<typeof impactActorsConviction>>): Array<Actor> {\n\treturn oldActors.map((currentActor, actorIndex) => \n\t\thasOneOfKinds(currentActor, [...walkerKeys, \"spaghettiMonster\"]) ?\n\t\tupdateIgnorance(currentActor, actorIndex, spreadConvictionVectors) :\n\t\tcurrentActor\n\t);\n}\n\n/**\n * The executePhase function for the \"enemyFlee\" phase.\n * It removes the actors that have decided to not exist anymore.\n * @param oldActors The actors before the phase\n * @param phaseResult The results of the phase\n * @returns A proposal for the actors after executing the \"enemyFlee\" phase\n */\nfunction enemyFleePhase(oldActors: Array<Actor>, phaseResult: Array<ReturnType<ActorActions[\"enemyFlee\"]>>): Array<Actor> {\n\treturn oldActors.filter((a, i) => !phaseResult[i]);\n}\n\nexport { spawnPhase, temperatureRisePhase, spreadConvictionPhase, enemyFleePhase, movePhase, playPhase };"],"names":[],"version":3,"file":"main.js.map"}